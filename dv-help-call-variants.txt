
WARNING: The TensorFlow contrib module will not be included in TensorFlow 2.0.
For more information, please see:
  * https://github.com/tensorflow/community/blob/master/rfcs/20180907-contrib-sunset.md
  * https://github.com/tensorflow/addons
If you depend on functionality not listed there, please file an issue.

Code for calling variants with a trained DeepVariant model.
flags:

/tmp/Bazel.runfiles_6za6NI/runfiles/com_google_deepvariant/deepvariant/call_variants.py:
  --batch_size: Number of candidate variant tensors to batch together during
    inference. Larger batches use more memory but are more computational
    efficient.
    (default: '512')
    (an integer)
  --checkpoint: Required. Path to the TensorFlow model checkpoint to use to
    evaluate candidate variant calls.
  --config_string: String representation of a tf.ConfigProto message, with
    comma-separated key: value pairs, such as "allow_soft_placement: True". The
    value can itself be another message, such as "gpu_options:
    {per_process_gpu_memory_fraction: 0.5}".
  --[no]debugging_true_label_mode: If true, read the true labels from examples
    and add to output. Note that the program will crash if the input examples do
    not have the label field. When true, this will also fill everything when
    --include_debug_info is set to true.
    (default: 'false')
  --examples: Required. tf.Example protos containing DeepVariant candidate
    variants in TFRecord format, as emitted by make_examples. Can be a comma-
    separated list of files, and the file names can contain wildcard characters.
  --execution_hardware: When in cpu mode, call_variants will not place any ops
    on the GPU, even if one is available. In accelerator mode call_variants
    validates that at least some hardware accelerator (GPU/TPU) was available
    for us. This option is primarily for QA purposes to allow users to validate
    their accelerator environment is correctly configured. In auto mode, the
    default, op placement is entirely left up to TensorFlow.  In tpu mode, use
    and require TPU.
    (default: 'auto')
  --gcp_project: Project name for the Cloud TPU-enabled project. If not
    specified, we will attempt to automatically detect the GCE project from
    metadata.
  --[no]include_debug_info: If true, include extra debug info in the output.
    (default: 'false')
  --kmp_blocktime: Value to set the KMP_BLOCKTIME environment variable to for
    efficient MKL inference. See
    https://www.tensorflow.org/performance/performance_guide for more
    information. The default value is 0, which provides the best performance in
    our tests. Set this flag to "" to not set the variable.
    (default: '0')
  --master: GRPC URL of the master (e.g. grpc://ip.address.of.tpu:8470). You
    must specify either this flag or --tpu_name.
  --max_batches: Max. batches to evaluate. Defaults to all.
    (an integer)
  --model_name: The name of the model architecture of --checkpoint.
    (default: 'inception_v3')
  --num_mappers: Number of parallel mappers to create for examples.
    (default: '48')
    (an integer)
  --num_readers: Number of parallel readers to create for examples.
    (default: '8')
    (an integer)
  --outfile: Required. Destination path where we will write output candidate
    variants with additional likelihood information in TFRecord format of
    CallVariantsOutput protos.
  --tpu_name: Name of the Cloud TPU for Cluster Resolvers. You must specify
    either this flag or --master. An empty value corresponds to no Cloud TPU.
    See https://www.tensorflow.org/api_docs/python/tf/contrib/cluster_resolver/T
    PUClusterResolver
  --tpu_zone: GCE zone where the Cloud TPU is located in. If not specified, we
    will attempt to automatically detect the GCE project from metadata.
  --[no]use_tpu: Use tpu if available.
    (default: 'false')

absl.logging:
  --[no]alsologtostderr: also log to stderr?
    (default: 'false')
  --log_dir: directory to write logfiles into
    (default: '')
  --[no]logtostderr: Should only log to stderr?
    (default: 'false')
  --[no]showprefixforinfo: If False, do not prepend prefix to info messages when
    it's logged to stderr, --verbosity is set to INFO level, and python logging
    is used.
    (default: 'true')
  --stderrthreshold: log messages at this level, or more severe, to stderr in
    addition to the logfile.  Possible values are 'debug', 'info', 'warning',
    'error', and 'fatal'.  Obsoletes --alsologtostderr. Using --alsologtostderr
    cancels the effect of this flag. Please also note that this flag is subject
    to --verbosity and requires logfile not be stderr.
    (default: 'fatal')
  -v,--verbosity: Logging verbosity level. Messages logged at this level or
    lower will be included. Set to 1 for debug logging. If the flag was not set
    or supplied, the value will be changed from the default of -1 (warning) to 0
    (info) after flags are parsed.
    (default: '-1')
    (an integer)

deepvariant.logging_level:
  --logging_level: select general logging threshold.
    (default: 'INFO')

deepvariant.modeling:
  --label_smoothing: Amount of label smoothing to use. By default this is
    0.0001% meaning that we expect a label error at a rate of 1 / 1,000,000
    (default: '1e-06')
    (a number)
  --learning_rate: Initial learning rate.
    (default: '0.064')
    (a number)
  --learning_rate_decay_factor: Learning rate decay factor.
    (default: '0.94')
    (a number)
  --moving_average_decay: The decay to use for the moving average.
    (default: '0.9999')
    (a number)
  --num_epochs_per_decay: Number of epochs after which learning rate decays.
    (default: '2.0')
    (a number)
  --rmsprop_decay: Decay term for RMSProp.
    (default: '0.9')
    (a number)
  --rmsprop_epsilon: Epsilon term for RMSProp.
    (default: '1.0')
    (a number)
  --rmsprop_momentum: Momentum.
    (default: '0.9')
    (a number)
  --save_interval_secs: Interval (in seconds) at which the model data should be
    checkpointed. Set to 0 to disable, -1 to ignore. Exclusive with
    save_interval_steps.
    (default: '600')
    (an integer)
  --save_interval_steps: Interval (in steps) at which the model data should be
    checkpointed. Set to 0 to disable, -1 to ignore. Exclusive with
    save_interval_secs.
    (default: '-1')
    (an integer)
  --save_summary_steps: Number of steps which must have run before showing
    summaries.
    (default: '100')
    (an integer)
  --seq_type_embedding_size: Set the embedding size for the sequencing type
    embeddings. Default is 200. This flag is only useful when model_name is
    `inception_v3_embedding`.
    (default: '200')
    (an integer)

tensorflow.python.platform.app:
  -h,--[no]help: show this help
    (default: 'false')
  --[no]helpfull: show full help
    (default: 'false')
  --[no]helpshort: show this help
    (default: 'false')

absl.flags:
  --flagfile: Insert flag definitions from the given file into the command line.
    (default: '')
  --undefok: comma-separated list of flag names that it is okay to specify on
    the command line even if the program does not define a flag with that name.
    IMPORTANT: flags in this list that have arguments MUST use the --flag=value
    format.
    (default: '')
